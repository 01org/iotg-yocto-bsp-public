From 3b54237c43498ca96b9e7557a6f7d0f95d1acfd2 Mon Sep 17 00:00:00 2001
From: Bob Paauwe <bob.j.paauwe@intel.com>
Date: Wed, 18 Jan 2017 14:02:16 -0800
Subject: [PATCH] drm/i915/gen9: Turbo Frequency Mode control (v4).

Provide a kernel API for query and control of the GPU TFM. This allows
a TFM kernel module to interact with the i915 driver as follows.

 - i915_gpu_get_max_pstate(); Query for the platform maximum frequency
                              opcode.
 - i915_gpu_pstate2freq();    Convert an opcode to freqency in KHz.
 - i915_gpu_disable_turbo();  Limit the GPU to non-turbo frequencies.
 - i915_gpu_enable_turbo();   Remove the GPU frequency limit imposed by the
                              i915_disable_turbo() function.

In this context "turbo" frequencies are those above RP1 and up to RP0.

The disable_turbo function places a temporary upper limit to GPU
frequencies but will not raise the limit if the sysfs max frequency is
already lower. Similarly, the enable_turbo function will increase any limit
set via the sysfs max frequency value.

The GPU is currently operating at a turbo freqency when disable_turbo is
called, the GPU frequency will be automatically lowered.

v2: This is rewrite of a patch set that added the TFM control into the
    existing IPS framework. While similar to some of the existing IPS
    code, separating it makes for less confusing code.
v3: Update the commit message to clarifiy turbo (Matt)
    Restrict the use of the TFM governor to Broxton only (Matt)
    Fix typo in dev_priv->tfm_enable(d) (Matt)
    Make tfm_lock mutex static (Matt)
    Fix a couple of typo's in comments (Matt)
v4: Forward port to 4.19 (Zainie)

Signed-off-by: Bob Paauwe <bob.j.paauwe@intel.com>
Signed-off-by: Wan Ahmad Zainie <wan.ahmad.zainie.wan.mohamad@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.c  |   5 ++
 drivers/gpu/drm/i915/i915_drv.h  |   6 ++
 drivers/gpu/drm/i915/intel_drv.h |   2 +
 drivers/gpu/drm/i915/intel_pm.c  | 138 +++++++++++++++++++++++++++++++++++++++
 4 files changed, 151 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_drv.c b/drivers/gpu/drm/i915/i915_drv.c
index cf328ee..7f43ca9 100644
--- a/drivers/gpu/drm/i915/i915_drv.c
+++ b/drivers/gpu/drm/i915/i915_drv.c
@@ -1287,6 +1287,9 @@ static void i915_driver_register(struct drm_i915_private *dev_priv)
 	if (IS_GEN5(dev_priv))
 		intel_gpu_ips_init(dev_priv);
 
+	if (IS_BROXTON(dev_priv))
+		intel_gpu_tfm_init(dev_priv);
+
 	intel_audio_init(dev_priv);
 
 	/*
@@ -1326,6 +1329,8 @@ static void i915_driver_unregister(struct drm_i915_private *dev_priv)
 	drm_kms_helper_poll_fini(&dev_priv->drm);
 
 	intel_gpu_ips_teardown();
+	if (IS_BROXTON(dev_priv))
+		intel_gpu_tfm_teardown();
 	acpi_video_unregister();
 	intel_opregion_unregister(dev_priv);
 
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 3f1a37f..740dae1 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1834,6 +1834,12 @@ struct drm_i915_private {
 	 * mchdev_lock in intel_pm.c */
 	struct intel_ilk_power_mgmt ips;
 
+	/*
+	 * GEN9 graphics turbo state. Protected by the global tfm_lock
+	 * in intel_pm.c
+	 */
+	int tfm_enabled;
+
 	struct i915_power_domains power_domains;
 
 	struct i915_psr psr;
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index 98a1472..d301e4c 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -2085,6 +2085,8 @@ bool chv_phy_powergate_ch(struct drm_i915_private *dev_priv, enum dpio_phy phy,
 void intel_pm_setup(struct drm_i915_private *dev_priv);
 void intel_gpu_ips_init(struct drm_i915_private *dev_priv);
 void intel_gpu_ips_teardown(void);
+void intel_gpu_tfm_init(struct drm_i915_private *dev_priv);
+void intel_gpu_tfm_teardown(void);
 void intel_init_gt_powersave(struct drm_i915_private *dev_priv);
 void intel_cleanup_gt_powersave(struct drm_i915_private *dev_priv);
 void intel_sanitize_gt_powersave(struct drm_i915_private *dev_priv);
diff --git a/drivers/gpu/drm/i915/intel_pm.c b/drivers/gpu/drm/i915/intel_pm.c
index de44435..df9cc7c 100644
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -37,6 +37,9 @@
 #include "gvt.h"
 #endif
 
+#define GEN9_TURBO_DISABLED    0
+#define GEN9_TURBO_ENABLED     1
+
 /**
  * DOC: RC6
  *
@@ -6732,6 +6735,10 @@ static int gen6_set_rps(struct drm_i915_private *dev_priv, u8 val)
 {
 	struct intel_rps *rps = &dev_priv->gt_pm.rps;
 
+	if ((dev_priv->tfm_enabled == GEN9_TURBO_DISABLED) &&
+	    (val > rps->rp1_freq))
+		val = rps->rp1_freq;
+
 	/* min/max delay may still have been modified so be sure to
 	 * write the limits value.
 	 */
@@ -8388,6 +8395,137 @@ void intel_gpu_ips_teardown(void)
 	spin_unlock_irq(&mchdev_lock);
 }
 
+static struct mutex i915_tfm_lock;
+static struct drm_i915_private *i915_tfm_dev;
+
+void intel_gpu_tfm_init(struct drm_i915_private *dev_priv)
+{
+	mutex_init(&i915_tfm_lock);
+
+	mutex_lock(&i915_tfm_lock);
+	i915_tfm_dev = dev_priv;
+	i915_tfm_dev->tfm_enabled = GEN9_TURBO_ENABLED;
+	mutex_unlock(&i915_tfm_lock);
+}
+
+void intel_gpu_tfm_teardown(void)
+{
+	mutex_lock(&i915_tfm_lock);
+	i915_tfm_dev = NULL;
+	mutex_unlock(&i915_tfm_lock);
+}
+
+/**
+ * i915_gpu_disable_turbo - disable grahics turbo
+ *
+ * Restrict the GPU frequencies to only those below the tfm limit.
+ */
+bool i915_gpu_disable_turbo(void)
+{
+	struct intel_rps *rps = &i915_tfm_dev->gt_pm.rps;
+	bool ret = false;
+
+	mutex_lock(&i915_tfm_lock);
+
+	if (!i915_tfm_dev)
+		goto out_unlock;
+
+	if (i915_tfm_dev->tfm_enabled == GEN9_TURBO_DISABLED)
+		goto out_unlock;
+
+	i915_tfm_dev->tfm_enabled = GEN9_TURBO_DISABLED;
+	ret = true;
+
+	/* If the current freq > rp1, clamp it down */
+	if (rps->cur_freq > rps->rp1_freq) {
+		intel_runtime_pm_get(i915_tfm_dev);
+		mutex_lock(&i915_tfm_dev->pcu_lock);
+
+		gen6_set_rps(i915_tfm_dev, rps->rp1_freq);
+
+		mutex_unlock(&i915_tfm_dev->pcu_lock);
+		intel_runtime_pm_put(i915_tfm_dev);
+	}
+
+out_unlock:
+	mutex_unlock(&i915_tfm_lock);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(i915_gpu_disable_turbo);
+
+/**
+ * i915_gpu_enable_turbo - enable graphics turbo
+ *
+ * Allow GPU to use frequencies up to softmax (I.E. remove clamping
+ * to RP1 that was set by the i915_tfm_turbo_disable() function.
+ */
+bool i915_gpu_enable_turbo(void)
+{
+	bool ret = false;
+
+	mutex_lock(&i915_tfm_lock);
+
+	if (!i915_tfm_dev)
+		goto out_unlock;
+
+	if (i915_tfm_dev->tfm_enabled == GEN9_TURBO_ENABLED)
+		goto out_unlock;
+
+	ret = true;
+	i915_tfm_dev->tfm_enabled = GEN9_TURBO_ENABLED;
+
+out_unlock:
+	mutex_unlock(&i915_tfm_lock);
+	return ret;
+
+}
+EXPORT_SYMBOL_GPL(i915_gpu_enable_turbo);
+
+/**
+ * Return the GPU frequency, in KHz.
+ */
+int i915_gpu_pstate2freq(int pstate)
+{
+	int ret = -1;
+
+	mutex_lock(&i915_tfm_lock);
+
+	if (!i915_tfm_dev)
+		goto out_unlock;
+
+	/* (val * GT_FREQUENCY_MULTIPLIER / GEN9_FREQ_SCALER) * 1000 */
+	ret = intel_gpu_freq(i915_tfm_dev, pstate) * 1000;
+
+out_unlock:
+	mutex_unlock(&i915_tfm_lock);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(i915_gpu_pstate2freq);
+
+/**
+ * Return the maximum pstate (or frequency opcode) available on the
+ * platform.
+ */
+int i915_gpu_get_max_pstate(void)
+{
+	struct intel_rps *rps = &i915_tfm_dev->gt_pm.rps;
+	int ret = 0;
+
+	mutex_lock(&i915_tfm_lock);
+
+	if (!i915_tfm_dev)
+		goto out_unlock;
+
+	ret = rps->rp0_freq;
+
+out_unlock:
+	mutex_unlock(&i915_tfm_lock);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(i915_gpu_get_max_pstate);
+
+
+
 static void intel_init_emon(struct drm_i915_private *dev_priv)
 {
 	u32 lcfuse;
-- 
1.9.1

