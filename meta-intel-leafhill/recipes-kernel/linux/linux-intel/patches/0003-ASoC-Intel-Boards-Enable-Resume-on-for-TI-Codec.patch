From 6adb19c366c29cb712a7aaac044ab4866722f19e Mon Sep 17 00:00:00 2001
From: Gaurav Vohra <gauravx.vohra@intel.com>
Date: Mon, 15 Apr 2019 17:30:41 +0800
Subject: [PATCH] ASoC: Intel: Boards: Enable Resume on for TI Codec

By default GPIO address values set by driver to SSP1 are being reset by BIOS after
resume from S3 state as by default BIOS sets the SSP1 for Bluetooth functionalities.

So we re-initialize SSP1 for I2S functinality at the time of resume for TI Master/Slave Mode

Signed-off-by: Gaurav Vohra <gauravx.vohra@intel.com>
---
 sound/soc/intel/boards/apli_lhcrb_aic3107M.c | 32 ++++++++++++++++++++++++++++
 sound/soc/intel/boards/apli_lhcrb_aic3107S.c | 32 ++++++++++++++++++++++++++++
 2 files changed, 64 insertions(+)

diff --git a/sound/soc/intel/boards/apli_lhcrb_aic3107M.c b/sound/soc/intel/boards/apli_lhcrb_aic3107M.c
index cabe471..d0c0192 100644
--- a/sound/soc/intel/boards/apli_lhcrb_aic3107M.c
+++ b/sound/soc/intel/boards/apli_lhcrb_aic3107M.c
@@ -332,6 +332,36 @@ static int aic3107_be_hw_params_fixup(struct snd_soc_pcm_runtime *rtd,
 	},
 };
 
+/* Northwest - GPIO 74 */
+#define I2S_1_BASE 0xD0C40000
+#define I2S_1 0x610
+#define I2S_1_VALUE 0x44000400
+static int aic3107M_resume(struct snd_soc_card *card){
+	// GPIO re-initialization code starts
+	char *gpio_addr;
+	u32 gpio_value;
+
+	gpio_addr = (void *)ioremap_nocache(I2S_1_BASE + I2S_1, 0x30);
+	gpio_value = I2S_1_VALUE;
+
+	pr_err("%p has %#x\n", gpio_addr, *(u32 *)gpio_addr);
+
+	memcpy_toio(gpio_addr, &gpio_value, sizeof(gpio_value));
+	memcpy_toio(gpio_addr + 0x8, &gpio_value, sizeof(gpio_value));
+	memcpy_toio(gpio_addr + 0x10, &gpio_value, sizeof(gpio_value));
+	memcpy_toio(gpio_addr + 0x18, &gpio_value, sizeof(gpio_value));
+	memcpy_toio(gpio_addr + 0x20, &gpio_value, sizeof(gpio_value));
+
+	pr_err("%p has %#x\n", gpio_addr, *(u32 *)gpio_addr);
+	pr_err("%p has %#x\n", gpio_addr + 0x8, *(u32 *)(gpio_addr + 0x8));
+	pr_err("%p has %#x\n", gpio_addr + 0x10, *(u32 *)(gpio_addr + 0x10));
+	pr_err("%p has %#x\n", gpio_addr + 0x18, *(u32 *)(gpio_addr + 0x18));
+	pr_err("%p has %#x\n", gpio_addr + 0x20, *(u32 *)(gpio_addr + 0x18));
+
+	iounmap(gpio_addr);
+	return 0;
+}
+
 /* apli audio machine driver for aic3107 Proto Board*/
 static struct snd_soc_card apli_lhcrb_aic3107 = {
 	.name = "apli-lhcrb-aic3107_i2s",
@@ -345,6 +375,7 @@ static int aic3107_be_hw_params_fixup(struct snd_soc_pcm_runtime *rtd,
 	.dapm_routes = apli_lhcrb_aic3107_map,
 	.num_dapm_routes = ARRAY_SIZE(apli_lhcrb_aic3107_map),
 	.fully_routed = true,
+	.resume_post = aic3107M_resume,
 };
 
 /* Northwest - GPIO 74 */
@@ -392,6 +423,7 @@ static int apli_audio_remove(struct platform_device *pdev)
 	.remove = apli_audio_remove,
 	.driver = {
 		.name = "lhcrb_aic3107M_i2s",
+		.pm = &snd_soc_pm_ops,
 	},
 };
 
diff --git a/sound/soc/intel/boards/apli_lhcrb_aic3107S.c b/sound/soc/intel/boards/apli_lhcrb_aic3107S.c
index f3b7be1..3b17f9d 100644
--- a/sound/soc/intel/boards/apli_lhcrb_aic3107S.c
+++ b/sound/soc/intel/boards/apli_lhcrb_aic3107S.c
@@ -336,6 +336,36 @@ static int aic3107_be_hw_params_fixup(struct snd_soc_pcm_runtime *rtd,
 	},
 };
 
+/* Northwest - GPIO 74 */
+#define I2S_1_BASE 0xD0C40000
+#define I2S_1 0x610
+#define I2S_1_VALUE 0x44000400
+static int aic3107S_resume(struct snd_soc_card *card){
+	// GPIO re-initialization code starts
+	char *gpio_addr;
+	u32 gpio_value;
+
+	gpio_addr = (void *)ioremap_nocache(I2S_1_BASE + I2S_1, 0x30);
+	gpio_value = I2S_1_VALUE;
+
+	pr_err("%p has %#x\n", gpio_addr, *(u32 *)gpio_addr);
+
+	memcpy_toio(gpio_addr, &gpio_value, sizeof(gpio_value));
+	memcpy_toio(gpio_addr + 0x8, &gpio_value, sizeof(gpio_value));
+	memcpy_toio(gpio_addr + 0x10, &gpio_value, sizeof(gpio_value));
+	memcpy_toio(gpio_addr + 0x18, &gpio_value, sizeof(gpio_value));
+	memcpy_toio(gpio_addr + 0x20, &gpio_value, sizeof(gpio_value));
+
+	pr_err("%p has %#x\n", gpio_addr, *(u32 *)gpio_addr);
+	pr_err("%p has %#x\n", gpio_addr + 0x8, *(u32 *)(gpio_addr + 0x8));
+	pr_err("%p has %#x\n", gpio_addr + 0x10, *(u32 *)(gpio_addr + 0x10));
+	pr_err("%p has %#x\n", gpio_addr + 0x18, *(u32 *)(gpio_addr + 0x18));
+	pr_err("%p has %#x\n", gpio_addr + 0x20, *(u32 *)(gpio_addr + 0x18));
+
+	iounmap(gpio_addr);
+	return 0;
+}
+
 /* apli audio machine driver for aic3107 Proto Board*/
 static struct snd_soc_card apli_lhcrb_aic3107 = {
 	.name = "apli-lhcrb-aic3107_i2s",
@@ -349,6 +379,7 @@ static int aic3107_be_hw_params_fixup(struct snd_soc_pcm_runtime *rtd,
 	.dapm_routes = apli_lhcrb_aic3107_map,
 	.num_dapm_routes = ARRAY_SIZE(apli_lhcrb_aic3107_map),
 	.fully_routed = true,
+	.resume_post = aic3107S_resume,
 };
 
 /* Northwest - GPIO 74 */
@@ -396,6 +427,7 @@ static int apli_audio_remove(struct platform_device *pdev)
 	.remove = apli_audio_remove,
 	.driver = {
 		.name = "lhcrb_aic3107S_i2s",
+		.pm = &snd_soc_pm_ops,
 	},
 };
 
-- 
1.9.1

