From b95ecf969ca0bf2c4aba72edcfc24f77b0073d12 Mon Sep 17 00:00:00 2001
From: Vinod Kumar <vinod.kumarx.vinod.kumar@intel.com>
Date: Fri, 24 Mar 2017 09:37:08 +0800
Subject: [PATCH] igb: Fix driver compilation errors when building without
 CONFIG_PM
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The following error messages was observed:

drivers/net/ethernet/intel/igb/igb_main.c: In function ‘igb_down’:
drivers/net/ethernet/intel/igb/igb_main.c:1785:23:
error: ‘struct dev_pm_info’ has no member named ‘runtime_status’
  if (!(pdev->dev.power.runtime_status == RPM_SUSPENDING))
                       ^
drivers/net/ethernet/intel/igb/igb_main.c:1797:23:
error: ‘struct dev_pm_info’ has no member named ‘runtime_status’
  if (!(pdev->dev.power.runtime_status == RPM_SUSPENDING)) {
                       ^
drivers/net/ethernet/intel/igb/igb_main.c:1815:23:
error: ‘struct dev_pm_info’ has no member named ‘runtime_status’
  if (!(pdev->dev.power.runtime_status == RPM_SUSPENDING))

We found out that we cannot access some of the data member of
dev_pm_info structure while CONFIG_PM is not selected.

We fix this issue by adding two new members, igb_runtime_status
and igb_runtime_auto, to the igb_adapter structure, and initialize
them with default value during _probe(). When CONFIG_PM is selected,
their values will be updated based on the value of runtime_status
and runtime_auto, respectively.

Reported-by: Stock, Ruediger <ruediger.stock@intel.com>
Signed-off-by: Vinod Kumar <vinod.kumarx.vinod.kumar@intel.com>
Signed-off-by: Wan Ahmad Zainie <wan.ahmad.zainie.wan.mohamad@intel.com>
Reviewed-by: Vinod Kumar <vinod.kumarx.vinod.kumar@intel.com>
---
 drivers/net/ethernet/intel/igb/igb.h      |  2 +
 drivers/net/ethernet/intel/igb/igb_main.c | 91 ++++++++++++++++++++++++-------
 2 files changed, 72 insertions(+), 21 deletions(-)

diff --git a/drivers/net/ethernet/intel/igb/igb.h b/drivers/net/ethernet/intel/igb/igb.h
index a22eb91..f996881 100644
--- a/drivers/net/ethernet/intel/igb/igb.h
+++ b/drivers/net/ethernet/intel/igb/igb.h
@@ -603,6 +603,8 @@ struct igb_adapter {
 	struct igb_mac_addr *mac_table;
 	struct vf_mac_filter vf_macs;
 	struct vf_mac_filter *vf_mac_list;
+	u8 igb_runtime_status;
+	u8 igb_runtime_auto;
 };
 
 /* flags controlling PTP/1588 function */
diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 3217bdea..9fd6d35 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -2171,14 +2171,17 @@ void igb_down(struct igb_adapter *adapter)
 	struct e1000_hw *hw = &adapter->hw;
 	u32 tctl, rctl;
 	int i;
+#ifdef CONFIG_PM
 	struct pci_dev *pdev = adapter->pdev;
+	adapter->igb_runtime_status = pdev->dev.power.runtime_status;
+#endif
 	/* signal that we're down so the interrupt handler does not
 	 * reschedule our watchdog timer
 	 */
 	/* While in suspend state the i210 FW is not doing Link Down
 	 * so no need to set state to __IGB_DOWN
 	 */
-	if (!(pdev->dev.power.runtime_status == RPM_SUSPENDING))
+	if (!(adapter->igb_runtime_status == RPM_SUSPENDING))
 		set_bit(__IGB_DOWN, &adapter->state);
 
 	/* disable receives in the hardware */
@@ -2192,7 +2195,7 @@ void igb_down(struct igb_adapter *adapter)
 	 * do not stop the queue so that apps can continue using
 	 * the net device as they are not aware of runtime suspend
 	 */
-	if (!(pdev->dev.power.runtime_status == RPM_SUSPENDING)) {
+	if (!(adapter->igb_runtime_status == RPM_SUSPENDING)) {
 		netif_carrier_off(netdev);
 		netif_tx_stop_all_queues(netdev);
 	}
@@ -2210,7 +2213,7 @@ void igb_down(struct igb_adapter *adapter)
 	/* While in suspend state the i210 FW is not doing Link Down
 	 * so no need to clear flag IGB_FLAG_NEED_LINK_UPDATE
 	 */
-	if (!(pdev->dev.power.runtime_status == RPM_SUSPENDING))
+	if (!(adapter->igb_runtime_status == RPM_SUSPENDING))
 		adapter->flags &= ~IGB_FLAG_NEED_LINK_UPDATE;
 
 	for (i = 0; i < adapter->num_q_vectors; i++) {
@@ -3369,6 +3372,10 @@ static int igb_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	device_set_wakeup_enable(&adapter->pdev->dev,
 				 adapter->flags & IGB_FLAG_WOL_SUPPORTED);
 
+	/* Initailize the rpm status and power control with default values */
+	adapter->igb_runtime_status = -1;
+	adapter->igb_runtime_auto = 0;
+
 	/* reset the hardware with the new settings */
 	igb_reset(adapter);
 
@@ -3948,6 +3955,9 @@ static int __igb_open(struct net_device *netdev, bool resuming)
 	struct pci_dev *pdev = adapter->pdev;
 	int err;
 	int i;
+#ifdef CONFIG_PM
+	adapter->igb_runtime_status = pdev->dev.power.runtime_status;
+#endif
 
 	/* disallow open during test */
 	if (test_bit(__IGB_TESTING, &adapter->state)) {
@@ -3958,7 +3968,7 @@ static int __igb_open(struct net_device *netdev, bool resuming)
 	if (!resuming)
 		pm_runtime_get_sync(&pdev->dev);
 
-	if (!(pdev->dev.power.runtime_status == RPM_RESUMING))
+	if (!(adapter->igb_runtime_status == RPM_RESUMING))
 		netif_carrier_off(netdev);
 
 	/* allocate transmit descriptors */
@@ -3989,7 +3999,7 @@ static int __igb_open(struct net_device *netdev, bool resuming)
 	 * do not set the number of queues again as we are
 	 * not stopping the queues during runtime suspend.
 	 */
-	if (!(pdev->dev.power.runtime_status == RPM_RESUMING)) {
+	if (!(adapter->igb_runtime_status == RPM_RESUMING)) {
 		err = netif_set_real_num_tx_queues(adapter->netdev,
 						   adapter->num_tx_queues);
 		if (err)
@@ -4024,7 +4034,7 @@ static int __igb_open(struct net_device *netdev, bool resuming)
 	/* In runtime suspend we are not stopping the queues
 	 * hence we do not need to start again.
 	 */
-	if (!(pdev->dev.power.runtime_status == RPM_RESUMING))
+	if (!(adapter->igb_runtime_status == RPM_RESUMING))
 		netif_tx_start_all_queues(netdev);
 
 	/* schedule runtime suspend from open */
@@ -5063,6 +5073,9 @@ static void igb_set_rx_mode_task(struct work_struct *work)
 	struct pci_dev *pdev = adapter->pdev;
 
 	pm_runtime_get_sync(&pdev->dev);
+#ifdef CONFIG_PM
+	adapter->igb_runtime_auto = pdev->dev.power.runtime_auto;
+#endif
 
 	__igb_set_rx_mode(netdev);
 	/* Schedule the suspend if netif_carrier_ok returns true
@@ -5070,7 +5083,7 @@ static void igb_set_rx_mode_task(struct work_struct *work)
 	 * Else let watchdog task schedule the suspend
 	 */
 	if (netif_carrier_ok(adapter->netdev) &&
-	    pdev->dev.power.runtime_auto) {
+	    adapter->igb_runtime_auto) {
 		pm_runtime_mark_last_busy(&pdev->dev);
 		pm_runtime_put_autosuspend(&pdev->dev);
 	} else {
@@ -5350,16 +5363,21 @@ static void igb_watchdog_task(struct work_struct *work)
 	int i;
 	u32 connsw;
 	u16 phy_data, retry_count = 20;
+#ifdef CONFIG_PM
 	struct pci_dev *pdev = adapter->pdev;
+	adapter->igb_runtime_status = pdev->dev.power.runtime_status;
+	adapter->igb_runtime_auto = pdev->dev.power.runtime_auto;
+#endif
 
 	/* While suspend in progress prevent rescheduling of watchdog */
-	if (pdev->dev.power.runtime_status == RPM_SUSPENDING ||
-	    pdev->dev.power.runtime_status == RPM_SUSPENDED) {
+	if (adapter->igb_runtime_status == RPM_SUSPENDING ||
+	    adapter->igb_runtime_status == RPM_SUSPENDED) {
 		return;
 	}
 
 	link = igb_has_link(adapter);
 
+#ifdef CONFIG_PM
 	if (pdev->dev.power.disable_depth) {
 		/* The igb firmware does not perform link down
 		 * under runtime PM.
@@ -5372,6 +5390,15 @@ static void igb_watchdog_task(struct work_struct *work)
 				link = false;
 		}
 	}
+#else
+	if (adapter->flags & IGB_FLAG_NEED_LINK_UPDATE) {
+		if (time_after(jiffies,
+			       (adapter->link_check_timeout + HZ)))
+			adapter->flags &= ~IGB_FLAG_NEED_LINK_UPDATE;
+		else
+			link = false;
+	}
+#endif
 
 	/* Force link down if we have fiber to swap to */
 	if (adapter->flags & IGB_FLAG_MAS_ENABLE) {
@@ -5392,7 +5419,9 @@ static void igb_watchdog_task(struct work_struct *work)
 		 * when cable is connected.
 		 * disable_depth is 1 meaning runtime pm disabled.
 		 */
+#ifdef CONFIG_PM
 		if (pdev->dev.power.disable_depth)
+#endif
 			pm_runtime_resume(netdev->dev.parent);
 
 		if (!netif_carrier_ok(netdev)) {
@@ -5522,7 +5551,7 @@ static void igb_watchdog_task(struct work_struct *work)
 		 * should be "auto". Otherwise scenerio where driver is loaded
 		 * w/o n/w cable is not entering to suspend
 		 */
-	if (pdev->dev.power.runtime_auto)
+	if (adapter->igb_runtime_auto)
 		pm_request_autosuspend(netdev->dev.parent);
 	}
 
@@ -6405,6 +6434,9 @@ static void igb_get_stats64(struct net_device *netdev,
 {
 	struct igb_adapter *adapter = netdev_priv(netdev);
 	struct pci_dev *pdev = adapter->pdev;
+#ifdef CONFIG_PM
+	adapter->igb_runtime_auto = pdev->dev.power.runtime_auto;
+#endif
 
 	pm_runtime_get(&pdev->dev);
 	spin_lock(&adapter->stats64_lock);
@@ -6417,7 +6449,7 @@ static void igb_get_stats64(struct net_device *netdev,
 	 * Else let watchdog task schedule the suspend.
 	 */
 	if (netif_carrier_ok(adapter->netdev) &&
-	    pdev->dev.power.runtime_auto) {
+	    adapter->igb_runtime_auto) {
 		pm_runtime_mark_last_busy(&pdev->dev);
 		pm_runtime_put_autosuspend(&pdev->dev);
 	} else {
@@ -7921,10 +7953,12 @@ static int igb_poll(struct napi_struct *napi, int budget)
 	int work_done = 0;
 	struct igb_adapter *adapter = q_vector->adapter;
 	struct pci_dev *pdev = adapter->pdev;
-
+#ifdef CONFIG_PM
+	adapter->igb_runtime_status = pdev->dev.power.runtime_status;
+#endif
 	/* if igb_poll invoked while suspend in progress return from here */
-	if (pdev->dev.power.runtime_status == RPM_SUSPENDING ||
-	    pdev->dev.power.runtime_status == RPM_SUSPENDED) {
+	if (adapter->igb_runtime_status == RPM_SUSPENDING ||
+	    adapter->igb_runtime_status == RPM_SUSPENDED) {
 		napi_complete(napi);
 		return 0;
 	}
@@ -7975,6 +8009,9 @@ static bool igb_clean_tx_irq(struct igb_q_vector *q_vector, int napi_budget)
 	union e1000_adv_tx_desc *eop_desc_temp = NULL;
 	unsigned int count = 0;
 	struct pci_dev *pdev = adapter->pdev;
+#ifdef CONFIG_PM
+	adapter->igb_runtime_auto = pdev->dev.power.runtime_auto;
+#endif
 
 	if (test_bit(__IGB_DOWN, &adapter->state))
 		return true;
@@ -8135,7 +8172,7 @@ static bool igb_clean_tx_irq(struct igb_q_vector *q_vector, int napi_budget)
 		spin_lock(&adapter->rpm_txlock);
 		adapter->igb_tx_pending -= count;
 		if (!adapter->igb_tx_pending &&
-		    pdev->dev.power.runtime_auto) {
+		    adapter->igb_runtime_auto) {
 			spin_unlock(&adapter->rpm_txlock);
 			pm_runtime_mark_last_busy(&pdev->dev);
 			pm_runtime_put_sync_autosuspend(&pdev->dev);
@@ -8549,6 +8586,9 @@ static int igb_clean_rx_irq(struct igb_q_vector *q_vector, const int budget)
 	u16 cleaned_count = igb_desc_unused(rx_ring);
 	struct igb_adapter *adapter = q_vector->adapter;
 	struct pci_dev *pdev = adapter->pdev;
+#ifdef CONFIG_PM
+	adapter->igb_runtime_auto = pdev->dev.power.runtime_auto;
+#endif
 
 	while (likely(total_packets < budget)) {
 		union e1000_adv_rx_desc *rx_desc;
@@ -8636,7 +8676,7 @@ static int igb_clean_rx_irq(struct igb_q_vector *q_vector, const int budget)
 	 * device power/control is set to "auto".
 	 */
 
-	if ((total_packets) && pdev->dev.power.runtime_auto) {
+	if (total_packets && adapter->igb_runtime_auto) {
 		pm_runtime_mark_last_busy(&pdev->dev);
 		pm_runtime_put_sync_autosuspend(&pdev->dev);
 	} else {
@@ -8879,6 +8919,9 @@ static int igb_vlan_rx_add_vid(struct net_device *netdev,
 	struct igb_adapter *adapter = netdev_priv(netdev);
 	struct pci_dev *pdev = adapter->pdev;
 	int ret;
+#ifdef CONFIG_PM
+	adapter->igb_runtime_auto = pdev->dev.power.runtime_auto;
+#endif
 
 	pm_runtime_get_sync(&pdev->dev);
 
@@ -8888,7 +8931,7 @@ static int igb_vlan_rx_add_vid(struct net_device *netdev,
 	 * Else let watchdog task schedule the suspend.
 	 */
 	if (netif_carrier_ok(adapter->netdev) &&
-	    pdev->dev.power.runtime_auto) {
+	    adapter->igb_runtime_auto) {
 		pm_runtime_mark_last_busy(&pdev->dev);
 		pm_runtime_put_autosuspend(&pdev->dev);
 	} else {
@@ -8920,7 +8963,9 @@ static int igb_vlan_rx_kill_vid(struct net_device *netdev,
 	int pf_id = adapter->vfs_allocated_count;
 	struct e1000_hw *hw = &adapter->hw;
 	struct pci_dev *pdev = adapter->pdev;
-
+#ifdef CONFIG_PM
+	adapter->igb_runtime_auto = pdev->dev.power.runtime_auto;
+#endif
 	pm_runtime_get_sync(&pdev->dev);
 	/* remove VID from filter table */
 	if (vid && !(adapter->flags & IGB_FLAG_VLAN_PROMISC))
@@ -8932,7 +8977,7 @@ static int igb_vlan_rx_kill_vid(struct net_device *netdev,
 	 * Else let watchdog task schedule the suspend
 	 */
 	if (netif_carrier_ok(adapter->netdev) &&
-	    pdev->dev.power.runtime_auto) {
+	    adapter->igb_runtime_auto) {
 		pm_runtime_mark_last_busy(&pdev->dev);
 		pm_runtime_put_autosuspend(&pdev->dev);
 	} else {
@@ -9168,7 +9213,9 @@ static int __maybe_unused igb_resume(struct device *dev)
 	struct e1000_hw *hw = &adapter->hw;
 	u32 err, val;
 	int status;
-
+#ifdef CONFIG_PM
+	adapter->igb_runtime_status = pdev->dev.power.runtime_status;
+#endif
 	pci_set_power_state(pdev, PCI_D0);
 	pci_restore_state(pdev);
 	pci_save_state(pdev);
@@ -9204,7 +9251,7 @@ static int __maybe_unused igb_resume(struct device *dev)
 
 	wr32(E1000_WUS, ~0);
 
-	if (!(pdev->dev.power.runtime_status == RPM_RESUMING)) {
+	if (!(adapter->igb_runtime_status == RPM_RESUMING)) {
 		rtnl_lock();
 		if (!err && netif_running(netdev))
 			err = __igb_open(netdev, true);
@@ -9230,7 +9277,9 @@ static int __maybe_unused igb_runtime_idle(struct device *dev)
 	/* Enter "suspended" mode on no activity, even with cable
 	 * attached when power/control is set to "auto".
 	 */
+#ifdef CONFIG_PM
 	if (dev->power.runtime_auto)
+#endif
 		pm_request_autosuspend(dev);
 	return -EBUSY;
 }
-- 
1.9.1

