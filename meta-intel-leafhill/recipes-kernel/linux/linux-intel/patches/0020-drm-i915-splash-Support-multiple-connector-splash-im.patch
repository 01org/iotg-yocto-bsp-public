From 9e1a3392fe34d383cf41c48c44a2298570cd7b9d Mon Sep 17 00:00:00 2001
From: Bob Paauwe <bob.j.paauwe@intel.com>
Date: Fri, 22 Apr 2016 16:43:26 -0700
Subject: [PATCH] drm/i915/splash: Support multiple connector/splash images.
 (v3)

Expand the command line option to hold multiple connector/image sections.
splash=<connector>:<image>:width,height,pitch,crtc_x,crtc_y,crtc_w,crtc_h:
       <connector>:<image>:width,height,pitch,crtc_x,crtc_y,crtc_w,crtc_h:
       <connector>:<image>:width,height,pitch,crtc_x,crtc_y,crtc_w,crtc_h

If multiple connectors are using the same splash screen image data file,
only request_firmware for the first instance and only allocate one
framebuffer.  All connectors using the same image data file will share
the framebuffer.

v2: move INIT_LIST_HEAD to top of function as it's required for _fini (James)
v3: rebase on 4.19

Signed-off-by: Bob Paauwe <bob.j.paauwe@intel.com>
Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
---
 drivers/gpu/drm/i915/i915_drv.h              |   5 +-
 drivers/gpu/drm/i915/intel_initial_modeset.c | 257 +++++++++++++++++----------
 2 files changed, 164 insertions(+), 98 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index eb1bdc2..982eb12 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -625,9 +625,11 @@ struct i915_drrs {
 };
 
 struct splash_screen_info {
+	struct list_head link;
 	const struct firmware *fw;
 	struct drm_i915_gem_object *obj;
 	char *connector_name;
+	char *image_name;
 	int width;
 	int height;
 	int pitch;
@@ -635,6 +637,7 @@ struct splash_screen_info {
 	int crtc_y;
 	int crtc_w;
 	int crtc_h;
+	struct drm_framebuffer *fb;
 };
 
 struct i915_psr {
@@ -1853,7 +1856,7 @@ struct drm_i915_private {
 	struct intel_fbdev *fbdev;
 	struct work_struct fbdev_suspend_work;
 
-	struct splash_screen_info *splash_screen_info;
+	struct list_head splash_list;
 
 	struct drm_property *broadcast_rgb_property;
 	struct drm_property *force_audio_property;
diff --git a/drivers/gpu/drm/i915/intel_initial_modeset.c b/drivers/gpu/drm/i915/intel_initial_modeset.c
index 60ffdb6..eb23597 100644
--- a/drivers/gpu/drm/i915/intel_initial_modeset.c
+++ b/drivers/gpu/drm/i915/intel_initial_modeset.c
@@ -138,100 +138,152 @@ static bool attach_crtc(struct drm_device *dev, struct drm_encoder *encoder,
 	return fb;
 }
 
-static char *get_splash_val(char *splash_str, int *val)
+static bool shared_image(struct drm_i915_private *dev_priv,
+			 char *image,
+			 struct splash_screen_info *info)
 {
-	char *sep;
+	struct splash_screen_info *splash_info;
 
-	if ((sep = strchr(splash_str, ','))) {
-		*val = simple_strtol(splash_str, NULL, 10);
-		splash_str = sep + 1;
-	} else {
-		*val = simple_strtol(splash_str, NULL, 10);
+	list_for_each_entry(splash_info, &dev_priv->splash_list, link) {
+		if (strcmp(splash_info->image_name, image) == 0) {
+			info->image_name = NULL;
+			info->fw = NULL;
+			info->obj = splash_info->obj;
+			return true;
+		}
 	}
+	return false;
+}
 
-	return splash_str;
+static struct splash_screen_info *match_splash_info(
+					struct drm_i915_private *dev_priv,
+					char* name)
+{
+	struct splash_screen_info *splash_info, *info = NULL;
+	list_for_each_entry(splash_info, &dev_priv->splash_list, link) {
+		if (strcmp(splash_info->connector_name, name) == 0)
+			info = splash_info;
+	}
+	return info;
 }
 
-static struct splash_screen_info *
-intel_splash_screen_init(struct drm_device *dev)
+static void intel_splash_screen_init(struct drm_device *dev)
 {
 	struct drm_i915_private *dev_priv = to_i915(dev);
-	struct splash_screen_info *splash_info;
-	char *splash_dup;
-	char *splash_str;
+	struct splash_screen_info *splash_info = NULL;
+	char *splash_dup = NULL;
+	char *splash_str = NULL;
 	char *sep;
 	u32 fw_npages;
 
-	if (i915_modparams.splash[0] == '\0')
-		return NULL;
-
-	splash_info = kzalloc(sizeof(struct splash_screen_info), GFP_KERNEL);
-	if (splash_info == NULL)
-		return NULL;
+	INIT_LIST_HEAD(&dev_priv->splash_list);
 
-	dev_priv->splash_screen_info = splash_info;
+	if (i915_modparams.splash[0] == '\0')
+		return;
 
 	splash_dup = kstrdup(i915_modparams.splash, GFP_KERNEL);
-	splash_str = splash_dup;
-
-	/* Pull connector name from string */
-	sep = strchr(splash_str, ':');
-	if (sep == NULL)
+	if (!splash_dup)
 		goto fail;
+	splash_str = splash_dup;
 
-	*sep = '\0';
-	splash_info->connector_name = kstrdup(splash_str, GFP_KERNEL);
-	splash_str = sep + 1;
+	/*
+	 * The loop condition find the connector name portion of the
+	 * string.  Once we have that, we parse the following fields
+	 * from the string:
+	 *  Image data file name, image data width, image data height,
+	 *  crtc rectangle (x, y, w, h).
+	 * Then the loop condition will execute again to get the next
+	 * connector name.
+	 */
+	while ((sep = strchr(splash_str, ':'))) {
+		splash_info = kzalloc(sizeof(struct splash_screen_info),
+				      GFP_KERNEL);
+		if (splash_info == NULL)
+			goto fail;
+
+		*sep = '\0';
+		splash_info->connector_name = kstrdup(splash_str, GFP_KERNEL);
+		if (!splash_info->connector_name)
+			goto fail;
+		splash_str = sep + 1;
 
-	/* Pull firmware file name from string */
-	sep = strchr(splash_str, ':');
-	if (sep == NULL)
-		goto fail;
+		/*
+		 * Pull firmware file name from string and check to see
+		 * if this image has been previously loaded.  request
+		 * firmware only needs to be called once for each file.
+		 */
+		sep = strchr(splash_str, ':');
+		if (sep == NULL)
+			goto fail;
+
+		*sep = '\0';
+
+		if (!shared_image(dev_priv, splash_str, splash_info)) {
+			splash_info->image_name = kstrdup(splash_str,
+							  GFP_KERNEL);
+			if (!splash_info->image_name)
+				goto fail;
+			request_firmware(&splash_info->fw, splash_str,
+					 &dev_priv->drm.pdev->dev);
+			if (splash_info->fw == NULL)
+				goto fail;
+		}
+		splash_str = sep + 1;
 
-	*sep = '\0';
-	request_firmware(&splash_info->fw, splash_str,
-			 &dev_priv->drm.pdev->dev);
-	if (splash_info->fw == NULL)
-		goto fail;
-	splash_str = sep + 1;
+		/* Pull splash screen width, height, crtc */
+		sscanf(splash_str, "%d,%d,%d,%d,%d,%d,%d",
+					&splash_info->width,
+					&splash_info->height,
+					&splash_info->pitch,
+					&splash_info->crtc_x,
+					&splash_info->crtc_y,
+					&splash_info->crtc_w,
+					&splash_info->crtc_h);
+
+		/* Only do this we haven't mapped this firmware image before */
+		if (splash_info->fw) {
+			/*
+			 * If splash image is baked into the kernel, we just get
+			 * a pointer.  Otherwise we'll get a list of pages.
+			 */
+			fw_npages = DIV_ROUND_UP_ULL(splash_info->fw->size,
+						     PAGE_SIZE);
+			if (splash_info->fw->pages == NULL)
+				splash_info->obj = i915_gem_object_create_splash(
+					&dev_priv->drm,
+					splash_info->fw->data,
+					fw_npages);
+			else
+				splash_info->obj = i915_gem_object_create_splash_pages(
+					&dev_priv->drm,
+					splash_info->fw->pages, fw_npages);
+		}
 
-	/* Pull splash screen width, height, crtc */
-	splash_str = get_splash_val(splash_str, &splash_info->width);
-	splash_str = get_splash_val(splash_str, &splash_info->height);
-	splash_str = get_splash_val(splash_str, &splash_info->pitch);
-	splash_str = get_splash_val(splash_str, &splash_info->crtc_x);
-	splash_str = get_splash_val(splash_str, &splash_info->crtc_y);
-	splash_str = get_splash_val(splash_str, &splash_info->crtc_w);
-	splash_str = get_splash_val(splash_str, &splash_info->crtc_h);
+		list_add_tail(&splash_info->link, &dev_priv->splash_list);
 
-	/*
-	 * If splash image is baked into the kernel, we just get
-	 * a pointer.  Otherwise we'll get a list of pages.
-	 */
-	fw_npages = DIV_ROUND_UP_ULL(splash_info->fw->size, PAGE_SIZE);
-	if (splash_info->fw->pages == NULL)
-		splash_info->obj = i915_gem_object_create_splash(dev,
-				   splash_info->fw->data, fw_npages);
-	else
-		splash_info->obj = i915_gem_object_create_splash_pages(dev,
-				   splash_info->fw->pages, fw_npages);
+		/* move to the next entry, break if reaching the end */
+		splash_str = strchr(splash_str, ':');
+		if(splash_str != NULL)
+			splash_str += 1;
+		else
+			break;
+	}
 
 	kfree(splash_dup);
-
-	return splash_info;
+	return;
 
 fail:
 	/* Clean up failed entry data */
 	if (splash_info) {
 		release_firmware(splash_info->fw);
 		kfree(splash_info->connector_name);
+		kfree(splash_info->image_name);
 	}
 	kfree(splash_info);
 	kfree(splash_dup);
-	return NULL;
+	return;
 }
 
-
 static struct drm_display_mode *get_modeline(struct drm_i915_private *dev_priv,
 					     struct drm_connector *connector,
 					     int width, int height)
@@ -329,8 +381,7 @@ static int update_connector_state(struct drm_atomic_state *state,
 static int update_primary_plane_state(struct drm_atomic_state *state,
 				      struct splash_screen_info *splash_info,
 				      struct drm_crtc *crtc,
-				      struct drm_display_mode *mode,
-				      struct drm_framebuffer *fb)
+				      struct drm_display_mode *mode)
 {
 	int hdisplay, vdisplay;
 	struct drm_plane_state *primary_state;
@@ -341,7 +392,7 @@ static int update_primary_plane_state(struct drm_atomic_state *state,
 	if (ret)
 		return ret;
 	drm_mode_get_hv_timing(mode, &hdisplay, &vdisplay);
-	drm_atomic_set_fb_for_plane(primary_state, fb);
+	drm_atomic_set_fb_for_plane(primary_state, splash_info->fb);
 
 	primary_state->crtc_x = splash_info->crtc_x;
 	primary_state->crtc_y = splash_info->crtc_y;
@@ -354,19 +405,39 @@ static int update_primary_plane_state(struct drm_atomic_state *state,
 	primary_state->src_y = 0 << 16;
 	primary_state->src_w = splash_info->width << 16;
 	primary_state->src_h = splash_info->height << 16;
+	primary_state->rotation = BIT(DRM_MODE_ROTATE_0);
 
 	return 0;
 }
 
+static void create_splash_fb(struct drm_device *dev,
+				struct splash_screen_info *splash)
+{
+	struct splash_screen_info *splash_info;
+	struct drm_i915_private *dev_priv = dev->dev_private;
+
+	splash->fb = intel_splash_screen_fb(dev, splash);
+	if (IS_ERR(splash->fb))
+		splash->fb = NULL;
+
+	if (splash->fb)
+		list_for_each_entry(splash_info, &dev_priv->splash_list, link)
+			if (splash->obj == splash_info->obj &&
+			    splash != splash_info) {
+				splash_info->fb = splash->fb;
+				drm_framebuffer_reference(splash_info->fb);
+			}
+}
+
 static int update_atomic_state(struct drm_device *dev,
 			       struct drm_atomic_state *state,
-			       struct splash_screen_info *splash_info,
-			       struct drm_framebuffer *fb,
-			       struct drm_display_mode *mode,
-			       struct drm_connector *connector)
+			       struct drm_connector *connector,
+			       struct drm_display_mode *mode)
 {
+	struct drm_i915_private *dev_priv = dev->dev_private;
 	struct drm_crtc *crtc;
 	int ret;
+	struct splash_screen_info *splash_info;
 
 	if (get_encoder(connector))
 		crtc = get_encoder(connector)->crtc;
@@ -383,11 +454,17 @@ static int update_atomic_state(struct drm_device *dev,
 		return ret;
 
 	/* set up primary plane if a splash screen is requested */
-	if (fb && splash_info) {
-		ret = update_primary_plane_state(state, splash_info,
-						 crtc, mode, fb);
-		if (ret)
-			return ret;
+	splash_info = match_splash_info(dev_priv, connector->name);
+	if (splash_info) {
+		if (splash_info->fb == NULL)
+			create_splash_fb(dev, splash_info);
+		if (splash_info->fb) {
+			ret = update_primary_plane_state(state,
+							 splash_info,
+							 crtc, mode);
+			if (ret)
+				return ret;
+		}
 	}
 	return 0;
 }
@@ -435,30 +512,22 @@ static void modeset_config_fn(struct work_struct *work)
 	struct drm_modeset_acquire_ctx ctx;
 	struct drm_plane *plane;
 	int ret;
-	struct splash_screen_info *splash_info, *info;
-	struct drm_framebuffer *fb = NULL;
 	bool found = false;
 	uint32_t used_crtcs = 0;
 	struct drm_display_mode *connector_mode[20];
 	struct drm_encoder *encoder;
 	struct drm_display_mode *mode;
 
+	intel_splash_screen_init(dev);
+
 	state = drm_atomic_state_alloc(dev);
 	if (!state)
 		return;
 
-	splash_info = intel_splash_screen_init(dev);
-	if (splash_info) {
-		fb = intel_splash_screen_fb(dev, splash_info);
-		if (IS_ERR(fb))
-			fb = NULL;
-	}
-
 	memset(connector_mode, 0, sizeof(connector_mode));
 	mutex_lock(&dev->mode_config.mutex);
 	drm_connector_list_iter_begin(dev, &conn_iter);
 	drm_for_each_connector_iter(connector, &conn_iter) {
-		info = NULL;
 		if (use_connector(connector)) {
 			encoder = get_encoder(connector);
 			if (!encoder)
@@ -473,10 +542,6 @@ static void modeset_config_fn(struct work_struct *work)
 				WARN_ON(connector->index >= 20);
 				connector_mode[connector->index] = mode;
 			}
-
-			if (splash_info &&
-			    strcmp(splash_info->connector_name, connector->name) == 0)
-					info = splash_info;
 		}
 	}
 	drm_connector_list_iter_end(&conn_iter);
@@ -485,7 +550,6 @@ static void modeset_config_fn(struct work_struct *work)
 		/* Try to detect attached connectors */
 		drm_connector_list_iter_begin(dev, &conn_iter);
 		drm_for_each_connector_iter(connector, &conn_iter) {
-			info = NULL;
 			if (connector->funcs && connector->funcs->detect)
 				connector->status = connector->funcs->detect(connector,
 									     true);
@@ -507,10 +571,6 @@ static void modeset_config_fn(struct work_struct *work)
 					WARN_ON(connector->index >= 20);
 					connector_mode[connector->index] = mode;
 				}
-
-				if (splash_info &&
-				    strcmp(splash_info->connector_name, connector->name) == 0)
-					info = splash_info;
 			}
 		}
 		drm_connector_list_iter_end(&conn_iter);
@@ -548,9 +608,8 @@ static void modeset_config_fn(struct work_struct *work)
 	drm_connector_list_iter_begin(dev, &conn_iter);
 	drm_for_each_connector_iter(connector, &conn_iter) {
 		if (connector_mode[connector->index]) {
-			ret = update_atomic_state(dev, state, info, fb,
-						  connector_mode[connector->index],
-						  connector);
+			ret = update_atomic_state(dev, state, connector,
+						  connector_mode[connector->index]);
 			if (ret)
 				goto fail;
 		}
@@ -628,15 +687,19 @@ static void initial_mode_destroy(struct drm_device *dev)
 void intel_initial_mode_config_fini(struct drm_device *dev)
 {
 	struct drm_i915_private *dev_priv = to_i915(dev);
-	struct splash_screen_info *splash_info = dev_priv->splash_screen_info;
+	struct splash_screen_info *splash_info, *tmp;
 
 	flush_work(&dev_priv->initial_modeset_work);
 
 	initial_mode_destroy(dev);
 
-	if (splash_info) {
+	list_for_each_entry_safe(splash_info, tmp,
+				 &dev_priv->splash_list, link) {
+		if (splash_info->fb)
+			drm_framebuffer_unreference(splash_info->fb);
 		release_firmware(splash_info->fw);
 		kfree(splash_info->connector_name);
+		kfree(splash_info->image_name);
 		kfree(splash_info);
 	}
 }
-- 
1.9.1

