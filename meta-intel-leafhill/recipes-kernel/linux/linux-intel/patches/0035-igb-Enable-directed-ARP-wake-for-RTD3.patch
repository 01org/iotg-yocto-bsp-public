From ea92b4552e1badacc6c047778a87e0af30885a6f Mon Sep 17 00:00:00 2001
From: "Lai, Poey Seng" <poey.seng.lai@intel.com>
Date: Thu, 23 Feb 2017 14:18:02 +0800
Subject: [PATCH] igb: Enable directed ARP wake for RTD3

This patch configures IP4AT register with the IP address value and sets
the corresponding IPAV register bit when entering RTD3. The target wakes
up on ARP request that matches the target's IP address.

Signed-off-by: Lai, Poey Seng <poey.seng.lai@intel.com>
Reviewed-by: Vinod Kumar <vinod.kumarx.vinod.kumar@intel.com>
---
 drivers/net/ethernet/intel/igb/e1000_defines.h |  1 +
 drivers/net/ethernet/intel/igb/igb_main.c      | 35 ++++++++++++++++++++++++--
 2 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/intel/igb/e1000_defines.h b/drivers/net/ethernet/intel/igb/e1000_defines.h
index dca6715..0457625 100644
--- a/drivers/net/ethernet/intel/igb/e1000_defines.h
+++ b/drivers/net/ethernet/intel/igb/e1000_defines.h
@@ -18,6 +18,7 @@
 #define E1000_WUFC_EX   0x00000004 /* Directed Exact Wakeup Enable */
 #define E1000_WUFC_MC   0x00000008 /* Directed Multicast Wakeup Enable */
 #define E1000_WUFC_BC   0x00000010 /* Broadcast Wakeup Enable */
+#define E1000_WUFC_ARPD 0x00000020 /* ARP Directed Wakeup Enable */
 
 /* Wake Up Status */
 #define E1000_WUS_EX	0x00000004 /* Directed Exact */
diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index ba432cb..3e08439 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -9,6 +9,7 @@
 #include <linux/bitops.h>
 #include <linux/vmalloc.h>
 #include <linux/pagemap.h>
+#include <linux/inetdevice.h>
 #include <linux/netdevice.h>
 #include <linux/ipv6.h>
 #include <linux/slab.h>
@@ -9002,9 +9003,12 @@ static int __igb_shutdown(struct pci_dev *pdev, bool *enable_wake,
 	struct net_device *netdev = pci_get_drvdata(pdev);
 	struct igb_adapter *adapter = netdev_priv(netdev);
 	struct e1000_hw *hw = &adapter->hw;
-	u32 ctrl, rctl, status;
-	u32 wufc = runtime ? (E1000_WUFC_LNKC | E1000_WUFC_EX) : adapter->wol;
+	u32 ctrl, rctl, status, ipav;
+	u32 wufc = runtime ? (E1000_WUFC_LNKC | E1000_WUFC_EX | E1000_WUFC_ARPD)
+		: adapter->wol;
 	bool wake;
+	__be32 ipv4_addr;
+	int i;
 
 	rtnl_lock();
 	/* For supporting runtime pm based on activity monitoring
@@ -9046,6 +9050,33 @@ static int __igb_shutdown(struct pci_dev *pdev, bool *enable_wake,
 			rctl |= E1000_RCTL_UPE;
 			wr32(E1000_RCTL, rctl);
 		}
+
+		/* Enable wake on ARP request & device IP address match */
+		if ((wufc & E1000_WUFC_ARPD) && netdev->ip_ptr) {
+			if (netdev->ip_ptr->ifa_list) {
+				ipv4_addr = netdev->ip_ptr->ifa_list->ifa_local;
+
+				/* Check availability of IP4AT(n) registers */
+				ipav = rd32(E1000_IPAV);
+				for (i = 0; i < 4; i++) {
+					if ((ipav & (BIT(i))) == 0)
+						break;
+				}
+
+				if (i < 4) {
+					dev_dbg(&pdev->dev,
+						"Use IP4AT(%0d). Data = 0x%x\n",
+						i, ipv4_addr);
+				} else {
+					i = 0;
+					dev_warn(&pdev->dev,
+						 "IP4AT(0) overwritten.\n");
+				}
+				wr32(E1000_IP4AT_REG(i), ipv4_addr);
+				wr32(E1000_IPAV, BIT(i));
+			}
+		}
+
 		ctrl = rd32(E1000_CTRL);
 		ctrl |= E1000_CTRL_ADVD3WUC;
 		wr32(E1000_CTRL, ctrl);
-- 
1.9.1

