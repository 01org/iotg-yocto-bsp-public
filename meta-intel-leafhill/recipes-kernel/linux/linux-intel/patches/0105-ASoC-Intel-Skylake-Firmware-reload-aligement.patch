From d041076bd905daedbfbea5077a6edcc4be157a06 Mon Sep 17 00:00:00 2001
From: Pawel Dogiel <pawelx.dogiel@intel.com>
Date: Tue, 29 Jan 2019 14:51:59 +0100
Subject: [PATCH 105/120] ASoC: Intel: Skylake: Firmware reload aligement

This patch changes FW reload BXT_FW_INIT_RETRY value to 3.
Also every time firmware fails to reload double the timeout value.

Change-Id: I5bef3f1d4ca5694841304964a9ebbc0b38f594ac
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/35613
Reviewed-by: Slawinski, AmadeuszX <amadeuszx.slawinski@intel.com>
Tested-by: Slawinski, AmadeuszX <amadeuszx.slawinski@intel.com>
---
 sound/soc/intel/skylake/bxt-sst.c | 15 +++++++++------
 1 file changed, 9 insertions(+), 6 deletions(-)

diff --git a/sound/soc/intel/skylake/bxt-sst.c b/sound/soc/intel/skylake/bxt-sst.c
index 2abfce3..6d823bf 100755
--- a/sound/soc/intel/skylake/bxt-sst.c
+++ b/sound/soc/intel/skylake/bxt-sst.c
@@ -59,7 +59,7 @@
 /* Delay before scheduling D0i3 entry */
 #define BXT_D0I3_DELAY 5000
 
-#define BXT_FW_INIT_RETRY 100
+#define BXT_FW_INIT_RETRY 3
 
 #define GET_SSP_BASE(N)	(N > 4 ? 0x2000 : 0x4000)
 
@@ -149,8 +149,8 @@ static unsigned int bxt_get_errorcode(struct sst_dsp *ctx)
  * status on core 1, so power up core 1 also momentarily, keep it in
  * reset/stall and then turn it off
  */
-static int sst_bxt_prepare_fw(struct sst_dsp *ctx,
-			const void *fwdata, u32 fwsize)
+static int sst_bxt_prepare_fw(struct sst_dsp *ctx, const void *fwdata,
+			      u32 fwsize, unsigned int timeout_val)
 {
 	int stream_tag, ret;
 
@@ -211,7 +211,7 @@ static int sst_bxt_prepare_fw(struct sst_dsp *ctx,
 
 	/* Step 7: Wait for ROM init */
 	ret = sst_dsp_register_poll(ctx, BXT_ADSP_FW_STATUS, SKL_FW_STS_MASK,
-			SKL_FW_INIT, BXT_ROM_INIT_TIMEOUT, "ROM Load");
+			SKL_FW_INIT, timeout_val, "ROM Load");
 	if (ret < 0) {
 		dev_dbg(ctx->dev, "Timeout for ROM init, ret:%d\n", ret);
 		goto base_fw_load_failed;
@@ -249,6 +249,7 @@ static int bxt_load_base_firmware(struct sst_dsp *ctx)
 {
 	struct firmware stripped_fw;
 	struct skl_sst *skl = ctx->thread_context;
+	unsigned int timeout_val = BXT_ROM_INIT_TIMEOUT;
 	int ret, i;
 
 	if (ctx->fw == NULL) {
@@ -270,8 +271,10 @@ static int bxt_load_base_firmware(struct sst_dsp *ctx)
 	stripped_fw.size = ctx->fw->size;
 	skl_dsp_strip_extended_manifest(&stripped_fw);
 
-	for (i = 0; i < BXT_FW_INIT_RETRY; i++) {
-		ret = sst_bxt_prepare_fw(ctx, stripped_fw.data, stripped_fw.size);
+	/* Double the ROM init timeout_val every time recovery fails */
+	for (i = 0; i < BXT_FW_INIT_RETRY; i++, timeout_val *= 2) {
+		ret = sst_bxt_prepare_fw(ctx, stripped_fw.data,
+				stripped_fw.size, timeout_val);
 		if (ret < 0) {
 			if (i < (BXT_FW_INIT_RETRY - 1)) {
 				dev_dbg(ctx->dev, "Error code=0x%x: FW status=0x%x\n",
-- 
1.9.1

